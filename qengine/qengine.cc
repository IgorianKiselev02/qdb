#include "qengine.h"

std::shared_ptr<Table> create_table(std::shared_ptr<PageCache> pageCache,
                                    FileId fileId, TableScheme tableScheme) {
    /*
     * TODO:
     *
     * Реализовать функцию создания таблицы
     *
     * Она должна:
     * 
     *   - создать табличный файл
     *   - создать в нем мета-страницу
     *   - зарегистрировать таблицу и поля в мета-таблицах
     *
     * Все манипуляции со содердимым таблиц - непосредственно в кеше страниц
     * без дополнительных копирований
     *
     * Приводим указатель к соотвествующей Meta-структуре и пишем-читаем поля
     *
     * Конкретный состав данных для хранения можно определить самостоятельно
     * Meta-структуры можно редактировать
     *
     * Избегайте хранения того, что известно из других источников
     * Например, не стоит хранить в каждой записи о том, что длина конкретного 
     * поля равна 4, если мы и так знаем, что это поле типа INT
     * 
     * Для простоты считаем, что ошибок не бывает
     * И пока не поддерживаем тип TEXT
     *
     */
    return 0;
}

void insert_tuple(std::shared_ptr<PageCache> pageCache,
                  std::shared_ptr<Table> table,
                  std::shared_ptr<DenseTuple> data) {
    /*
     * TODO:
     *
     * Реализовать функцию добавления записи
     *
     * Она должна:
     *  
     *   - при необходимости создать в нем новую страницу в таблице
     *   - обновив данные, зафиксировать добавление новой записи
     *
     * 
     * Для простоты считаем, что  ошибок не бывает
     *
     */


}

std::vector<DenseTuple> select_all(std::shared_ptr<PageCache> pageCache, std::shared_ptr<Table>) {
    /*
     * TODO:
     *
     * Реализовать упрощенный SELECT 
     *
     * Она должна:
     *  
     *   - выбрать все записи таблицы в произвольном порядке 
     *
     * 
     * Для простоты считаем, что  ошибок не бывает
     *
     */
     return std::vector<DenseTuple>{};
}

std::vector<DenseTuple> select(std::shared_ptr<Storage> pageCache, std::shared_ptr<Table>) {
    /*
     * TODO:
     *
     * Реализовать SELECT 
     *
     * Поскольку у нас не было общей структуры данных для хранения результатов синтаксического разбора -
     * можно (и нужно) добавить параметры, опимсывающие перечень выражений и критерий выбора
     *
     * Она должна:
     *  
     *   - выбрать все записи таблицы в произвольном порядке 
     *
     * 
     * Для простоты считаем, что  ошибок не бывает
     *
     */

     return std::vector <DenseTuple>{};
}

